name: base_flutter_app
description: A base flutter application with clean architecture

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.16.2 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application. Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # A Flutter plugin to use the Firebase Cloud Messaging API.
#  firebase_messaging: ^14.1.4

  # A Flutter plugin to use the Firebase Core API, which enables connecting to multiple Firebase apps
#  firebase_core: ^2.4.0

  # Provides Dart Build System builders for handling JSON.
  json_serializable: ^6.3.1

  # MobX for the Dart language.
  mobx: ^2.0.7

  # A wrapper around InheritedWidget to make them easier to use and more reusable.
  provider: ^6.0.4

  # A state-management library that:
    # catches programming errors at compile time rather than at runtime
    # removes nesting for listening/combining objects
    # ensures that the code is testable
  riverpod: ^1.0.3+1

  # This is a sample flutter on boarding plugin you use to attract first-time users when they land on your page, hence the name on boarding. You can implement this widget anyhow you want in your app, by managing its top-level state to show the widget to users at the appropriate time. There are also many parameters that enable you to design this widget to your liking.
  onboarding: ^3.1.0

  # The Flutter Date Range Picker is a lightweight widget that allows users to easily select a single date, multiple dates, or a range of dates. Date Picker provides month, year, decade, and century view options to quickly navigate to the desired date.
  syncfusion_flutter_datepicker: 20.1.55

  # This package allows you to draw dotted lines with Flutter.
  dotted_line: ^3.0.0

  # A carousel slider widget.
  carousel_slider: ^4.2.1

  #The stepper widgets help you to show or collect information from users using organized steps. The page indicator widgets allow you to visually notify users about their current position as they scroll through a group of pages.
  im_stepper: ^0.1.3

  #Flutter Barcode Generator package is a data visualization widget used to generate and display data in a machine-readable format. It provides a perfect approach to encoding input values using supported symbology types.
  syncfusion_flutter_barcodes: ^20.3.61
  speech_to_text: ^6.1.1

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^1.0.0

  # The build_runner package provides a concrete way of generating files using Dart code, outside of tools like pub.
  build_runner: ^2.1.6


# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
      - assets/images/onboard_images/
      - assets/icons/
      - assets/images/launch_images/
      - assets/images/components/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
